@using System.Text
@using System.Text.Json
@using System.Text.RegularExpressions
@using System.Xml
@if (new [] {"jpg", "jpeg", "png"}.Contains(Extension))
{
    <img src="data:image/@( Extension );base64,@( Convert.ToBase64String(File.ReadAllBytes(FilePath)) )" />
}
else if(new [] {"txt", "json", "xml", "strings"}.Contains(Extension))
{
    <pre>@ReadTextFile(FilePath)</pre>
}
else
{
    <p>Unsupported file type</p>
}

@code {
    [Parameter]
    public required string FilePath { get; set; }

    private string Extension => Path.GetExtension(FilePath).TrimStart('.');

    private string ReadTextFile(string filePath)
    {
        if (Extension == "json")
        {
            return FormatJson(File.ReadAllText(filePath));
        }
        if (Extension == "xml")
        {
            return FormatXml(filePath);
        }

        return File.ReadAllText(filePath).Replace("\\r\\n", "\n").Replace("\\r", "\n").Replace("\\n", "\n");
    }

    private string FormatJson(string jsonContent)
    {
        // Unminify minified JSON for better readability
        var formattedJson = JsonSerializer.Serialize(JsonSerializer.Deserialize<object>(jsonContent), new JsonSerializerOptions { WriteIndented = true });

        // Decode unicode characters
        return Regex.Unescape(formattedJson);
    }

    private string FormatXml(string xmlFilePath)
    {
        var doc = new XmlDocument();
        doc.Load(xmlFilePath);

        var memoryStream = new MemoryStream();
        doc.Save(memoryStream);

        // Unminify minified XML for better readability
        return Encoding.UTF8.GetString(memoryStream.ToArray());
    }
}
