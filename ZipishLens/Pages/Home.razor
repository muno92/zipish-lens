@page "/"
@using System.IO.Compression
@using ZipishLens.Shared

<main>
    <nav class="sidebar">
        <div class="top-row navbar navbar-dark">
            <div class="container-fluid">
                <a class="navbar-brand" href="">ZipishLens</a>
            </div>
        </div>

        <DirectoryEntries BaseDir="@_tmpDirPath" EntryPaths="_loadedFiles" OnSelectFile="SelectFile" />
    </nav>

    <section>
        <div class="top-row">
            <InputFile OnChange="LoadFiles"/>
            <a href="https://github.com/muno92/zipish-lens/" target="_blank">About</a>
        </div>

        <article class="content">
            @if (!string.IsNullOrEmpty(_selectedFile))
            {
                <FileContent FilePath="@_selectedFile"/>
            }
        </article>
    </section>

</main>

@code {
    private IEnumerable<string> _loadedFiles = [];
    private readonly string _tmpFilePath = "/tmp/tmp_file.zip";
    private readonly string _tmpDirPath = "/tmp/tmp_dir/";
    private string _selectedFile = "";

    private void SetUp()
    {
        _loadedFiles = [];
        _selectedFile = "";
        if (File.Exists(_tmpFilePath))
        {
            File.Delete(_tmpFilePath);
        }

        if (Directory.Exists(_tmpDirPath))
        {
            Directory.Delete(_tmpDirPath, true);
        }
        Directory.CreateDirectory(_tmpDirPath);
    }

    private async Task LoadFiles(InputFileChangeEventArgs obj)
    {
        SetUp();

        var uploadedFile = obj.GetMultipleFiles().Single();

        await using FileStream fs = new FileStream(_tmpFilePath, FileMode.Create);
        await uploadedFile.OpenReadStream().CopyToAsync(fs);
        ZipFile.ExtractToDirectory(_tmpFilePath, _tmpDirPath);

        _loadedFiles = Directory.EnumerateFileSystemEntries(_tmpDirPath);
    }

    private void SelectFile(string filePath)
    {
        _selectedFile = filePath;
    }
}
