name: Test/Deploy
on:
  [ pull_request, push ]

jobs:
  code_analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore -warnAsError ZipishLens
      - name: Inspection
        uses: muno92/resharper_inspectcode@v1
        with:
          solutionPath: ./ZipishLens.sln
          exclude: ZipishLens/wwwroot/**
          minimumReportSeverity: 'WARNING'
  deploy:
    if: github.ref_name == 'main'
    needs: [ code_analysis ]
    permissions:
      contents: read
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Build
        run: |
          dotnet publish -c Release ZipishLens -o output
      - name: Deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_WORKERS_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  preview:
    if: github.ref_name != 'main'
    needs: [ code_analysis ]
    permissions:
      contents: read
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Build
        run: |
          dotnet publish -c Release ZipishLens -o output
      - name: Deploy Preview
        id: deploy-preview
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_WORKERS_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: versions upload
      - name: Output Preview URL to Pull Request
        if: github.event_name == 'pull_request'
        env:
          DEPLOYMENT_URL: ${{ steps.deploy-preview.outputs.deployment-url }}
        uses: actions/github-script@v6
        with:
          script: |
            const commentTag = '<!-- preview-url-comment -->';
            const body = `
            ${commentTag}
            # Preview URL
  
            | Name                    | Result |
            | ----------------------- | - |
            | **Preview URL**:        | ${process.env.DEPLOYMENT_URL} |
            `;
      
      
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
        
            const previewUrlComment = comments.find(comment => comment.body.includes(commentTag));
            
            if (previewUrlComment) {
              await github.rest.issues.updateComment({
                comment_id: previewUrlComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
              return;           
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
